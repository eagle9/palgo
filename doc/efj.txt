Any int question regarding this book? 
must read java books: head first java, effective java, java performance by scott
1. Consider static factory methods instead of constructors

2. Consider a builder when faced with many constructor parameters

3. Enforce the singleton property with a private constructor or an enum type

4. Enforce noninstantiability with a private constructor

5. Prefer dependency injection to hardwiring resources

6. Avoid creating unnecessary objects

7. Eliminate obsolete object references
  I got it.
  for example, you implement a stack using an array. you use size to track 
array cells in use.  when a cell no longer used by the stack,  null the object 
stored in the out cells. 

8. Avoid finalizers and cleaners

9. Prefer try-with-resources to try-finally
  I got this new syntax, pretty neat. I used to use try-finally a lot.

10. Obey the general contract when overriding equals

11. Always override hashCode when you override equals

12. Always override toString

13. Override clone judiciously

14. Consider implementing Comparable

15. Minimize the accessibility of classes and members

16. In public classes, use accessor methods, not public fields

17. Minimize mutability
   understand some

18. Favor composition over inheritance

19. Design and document for inheritance or else prohibit it

20. Prefer interfaces to abstract classes
   read first pass. not quite get it.  skeleton class? why? the only case that abstract class needed. understand that java promotes interface rather than multiple inheritance (which is bad with bloaded classes).  default method of interface?  yes, default method since Jdk8 is allowed. still not quite understand abstract class for skeleton implemenation, what is skeleton impl? 
not easy read.  
 
21. Design interfaces for posterity What is posterity 

22. Use interfaces only to define types

23. Prefer class hierachies to tagged classes

24. Limit source file to a single top-level class



C8. Methods
Item 49 --- check parameters for validity.  @return ... @throws ...Exception
   mod 
  null check?   
