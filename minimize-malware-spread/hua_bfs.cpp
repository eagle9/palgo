/*
huahua
Solution: BFS
Time complexity: O(n^3)

Space complexity: O(n^2)


Runtime: 268 ms, faster than 15.05% of C++ online submissions for Minimize Malware Spread.
Memory Usage: 28.7 MB, less than 23.26% of C++ online submissions for Minimize Malware Spread.
*/
class Solution {
public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int min_affected = INT_MAX;
    int min_node = -1;
    sort(begin(initial), end(initial));
    for (int t : initial) {
      vector<int> bad(graph.size(), 0);
      queue<int> q;
      for (int n : initial)
        if (n != t) {
          bad[n] = 1;
          q.push(n);
        }
      int affected = initial.size() - 1;
      while (!q.empty()) {
        int size = q.size();
        while (size--) {
          int n = q.front(); q.pop();
          for (int i = 0; i < graph[n].size(); ++i) {            
            if (graph[n][i] == 0 || bad[i]) continue;
            ++affected;            
            bad[i] = 1;
            q.push(i);
          }
        }
      }      
      if (affected < min_affected) {
        min_affected = affected;
        min_node = t;
      }
    }    
    return min_node;    
  }
};
